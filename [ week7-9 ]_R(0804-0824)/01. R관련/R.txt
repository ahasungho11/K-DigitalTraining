< 루틴 형성 관련 >
1. 데이터 구성요소 정보 확인
[ ?state.x77 ]
2. 데이터 형태 확인 / DF 여부 확인
[ calss(state.x77 ]   / [ is.data.frame(state.x77) ]
3. 원본 유지하기 & DF로 바꿔주기
[ st <- as.data.frame(state.x77) ]
4. 데이터 형태 확인
[ class(st) ]
5. 나머지 정보들 확인
[ str(st) ], [ dim(st) ] 
6. 자료형 확인 및 형변환
[ is.xxx () ]   : 데이터 구조의 자료형 확인
-> is.matrix(state.x77)   =>  TRUE
-> is.data.frame(state.x77)   =>  FALSE
[ as.xxx () ]  : 데이터 구조의 자료형 변환
-> df.x77 <- as.data.frame(state.x77)
-> is.data.frame(state.x77)   =>  TRUE

=========================================================
# x와 y가 모두 수치   => 문제가 안되겠지만
# x가 범주, y가 수치  => 평균으로 비교
# x와 y가 모두 범주   => 모자이크, 카이제곱검정
# x가 수치, y가 범주  => 로직 회귀분석(?)
# + 독립변수가 여러 개가 된다면 (해당 4가지 경우는 1개로 가정했지만)
=========================================================

7. 데이터 전처리
: 본격적인 통계분석을 시작하기 전에 필요한 데이터 정제 작업
=> 결측치와 이상치, 데이터의 변환, 데이터의 표준화
=> 결측치(누락된 관측값, 제거 or 대체, NA(R에서 결측치를 나타내는 값))

7-1. 결측치 처리
---------------------------------------------------------------------------------------
library(MASS)
data('survey')
df <-survey
str(df)

# 둘 중 하나로 NA 처리리
df <- na.omit(df)
df <- df[complete.cases(df)]

# 여기의 조건들 거는 흐름 확실하게!!
hist(df[df$Sex == 'Male', ]$Height, breaks=20)
hist(df[df$Sex == 'Female', ]$Height, breaks=20)

# sampling 개수
table(df$Sex)
-> 남녀 84명씩을 samepling 한 것으로 보면 되겠고.

# p-value 값 확인
t.test(Height ~ Sex, data = df)
->  p-value < 2.2e-16    => 거의 0%에 가깝다다는 것이지
->  모집단과의 차이가 날 확률은 0%에 가깝다는 말 => 유의하다

# Y(종속 변수) ~ X(독립변수1), ...
boxplot(Height ~ Sex, data = df, col=c('hotpink', 'orange'))
-> 거의 50%의 데이터가 하나도 안 겹치다니 (box안)
-> 전체적인 데이터에서 안 겹치니까, 확연히 차이가 있다는 것
-> 유의한지 여부는 => p-value 값을 추가적으로 얘기해주면 되는 것


---------------------------------------------------------------------------------------
* library('VIM') : VIM 패키지는 결측값의 시각화를 돕는 패키지
(for plot 같은 기본 명령어를 사용하기 위해서 결측값을 특정값으로 바꿔야만 하는 등 복잡한 과정을 거치지 않기 위해)

1) aggr() : 변수별로 결측치의 분포와 발생 패턴을 시각화
-> aggr(diamonds, prop=F, numbers=T, sortVar = T)
            데이터셋              기타옵션
-> ?aggr : aggr에 대한 상세한 옵션
=> i) 왼쪽 그래프로 결측값의 수와 종류를 확인
=> ii) 우측 표는 carat 만 결측값이 있는 경우, cut만 결측값이 있는 경우, cut과 carat 모두 결측값이 있는 경우
=> 항목이 많아지면 보기 힘들어지니 보고자 하는 변수의 숫자를 적절하게 줄여야 함

2) marginplot : '두 결측값'의 연관성
-> marginplot(diamonds[c("carat","cut")], pch=20, col=c("darkgray","red", "blue"))
    marginplot(데이터셋(변수 이름), 크기, 변수 색상)


* library('ggplot2') : 
---------------------------------------------------------------------------------------
cf) 처리 관련 함수들
(1) diamonds 데이터에서 컷이 Good, 그리고 1 캐럿이 넘는 값들을 모두 결측값으로 바꿔
replace(diamonds$carat,diamonds$carat>1,NA)->diamonds$carat
replace(diamonds$cut,diamonds$cut=="Good",NA)->diamonds$cut


---------------------------------------------------------------------------------------
*** is.na()과 na.omit()  =>   벡터 친화적
*** complete.cases()   =>   DF 친화적
---------------------------------------------------------------------------------------
# Matrix/DataFrame의 행(data)별 결측치 확인
rowSums(is.na(x))              ## 행렬
sum(rowSum(is.na(x))>0)    ## 행렬
sum(is.na(x))                    ## DF
------------------------------------------------------------------------------------
1) NA값을 삭제 
[ na.rm = T ]
1-1) NA값은 포함하지 않고 평균값/분산/표준편차을 출력
mean(aq$Ozone, na.rm = T)
var(aq$Ozone, na.rm = T)
sd(aq$Ozone, na.rm = T)
------------------------------------------------------------------------------------
*** 각 변수별로 결측치가 몇 개인지 확인
[ colSums(is.na(pg)) ]

2) 데이터 프레임에서 결측치를 제거
[ na.omit() ]

aq <- airquality
str(aq) -> 153개
aq1 <- na.omit(airquality)
str(aq1) -> 11개

2-1) 결측치 개수 확인
[ is.na() ]
: 괄호 안에 vector, list, data.frame 등을 모두 넣을 수 있어서 편하며 각각의 값에 결측치가 있으면 TRUE, 결측치가 없으면 FALSE를 반환

(1) 논리값으로 출력, NA인 행들은 TRUE로 뜸
[ is.na(aq$Ozone) ]
(2) aq$Ozone에서 NA인 원소들만 추출한 것
[ aq$Ozone[is.na(aq$Ozone)] ]
(3) aq$Ozone에서 NA가 아닌 원소들만 추출한 것
[ aq$Ozone[!is.na(aq$Ozone)] ]
(4) 결측치의 갯수 => TRUE인 것들의 갯수 합산
[ sum(is.na(aq$Ozone)) ]
[ sum(is.na(aq$Solar.R)) ]
[ sum(is.na(aq$Ozone) & is.na(aq$Solar.R)) ]
------------------------------------------------------------------------------------
3) 결측치를 대체할 것을 할당
(1) NA값을 가진 자리에 0을 넣음
[ ozone[is.na(aq$Ozone)] <- 0 ]
-> but, 평균값이 확 낮아져버림
-> 따라서, 0대신 평균을 해도 되겠지?

(2) NA값을 가진 자리에 평균값을 넣음
[ ozone[is.na(aq$Ozone)] <- mean(ozone, na.rm = T) ]
-> 평균값으로 NA로 대체해버리면, 길쭉한 종모양으로 변해버림
-> 표준편차에 영향을 미치게 된 것

(3) NA값을 가진 자리에 sample()로 뽑은 값을 넣음
[ ozone <- aq$Ozone ]
[ ozone[is.na(ozone)] <- sample(na.omit(aq$Ozone), 37) ]
-> sample() 해당 백터(첫 번째 인자)에서 37개(두번째 인자)의 NA를 랜덤으로 추출해서 채움
-> 평균의 표준편차에 영향을 크게 미치지 않는다
------------------------------------------------------------------------------------
4) 행단위로 NA 여부를 체크
[ complete.cases(aq) ]
: 행 단위로, NA가 없는 행은 TRUE, NA가 하나라도 포함된 행은 FALSE로 반환

cf) nrow(aq[complete.cases(aq), ])
: NA가 없는 행의 개수

4-1) NA를 포함한 것만 뽑아
[ aq[!complete.cases(aq), ] ]
->  결측치 제거 대상이 된다는 것

4-2) NA를 포함하지 않은 행만 뽑아
[ aq[complete.cases(aq), ] ]

4-3) 결측치 개수/평균 확인
sum(!complete.cases(aq))
mean(!complete.cases(aq))

================================================
7-2. 이상치 확인 및 처리
: 이상치 -> 단위가 다름 or 실제로 특이한 값
boxplot() : 데이터셋에 이상치가 존재하는 지를 시각화
boxplot.stats() : 함수를 이용한 이상치에 대한 상세 확인
------------------------------------------------------------------------------------
* 이상치 처리
* 이상치가 통계량을 왜곡할 때는 결측치로 변환하여 통계분석 대상에서 제외
df <- data.frame(state.x77)
# 기존 행 개수 확인
nrow(df)
[1] 50

# 이상치 있는 행 NA로 채우기
df[df$Income == outlier , ] <- NA
df[!complete.cases df ), ]

# NA인 행 삭제하기
df.no.outlier <- na.omit(df)
nrow(df.no.outlier)
[1] 49
------------------------------------------------------------------------------------

i) 단일 변수 확인
st <- data.frame(state.x77)
1) 앗! 이상치가 발견되었다!!
boxplot(st$Income, col = 'tomato', pch = 19, border = 'blue')
-> boxplot() : 데이터셋에 이상치가 존재하는 지를 시각화

2) 해당 함수는 '리스트'로 리턴해줌
boxplot.stats(st$Income)
-> boxplot.stats() : 함수를 이용한 이상치에 대한 상세 확인

3) $out -> 이상치
class(boxplot.stats(st$Income))

4) 함수의 리턴값에 바로 $out 하면 해당 값만 리턴
boxplot.stats(st$Income)$out
4-1) 이 수치만 빼면 numeric
class(boxplot.stats(st$Income)$conf)

5) 이상치를 포함하고 있는 행 확인 (알래스카가 소득이 유독 높은 곳이었구나!)
st[st$Income == boxplot.stats(st$Income)$out, ]

*** 범주로 구분할 수 있는 데이터는 범주별로 이상치를 확인할 수 있음
ii) 다중 변수 확인
df <- iris
1) 이상치가 없군-. but, iris는 단일 품종x, 각 품종을 모아서 한번에 알아보자
boxplot(df$Petal.Length, col='skyblue')

2) 종속변수와 독립변수간의 관계를 통해 이상치가 있는지 확인
2-1) 이상(수)치가 있네!? (setosa랑 versicolor에 1개씩 있네)
boxplot(Petal.Length ~ Species, data = iris, col='steelblue')

2-2) 우선, setosa의 이상값이 얼마인가를 알아보자
outlier = boxplot.stats(iris[iris$Species == 'setosa', 3])$out
-> 1이네
2-3) 어느 행에 있는건가!?
iris[iris$Petal.Length == outlier, ]
-> 23행 하나 나오네

--------------------------------------------------

*** 이상치가 여러 개인 경우에는 % 연산자 를 활용하여 결측치를 제거
2-1) 이상치가 있네? (setosa에만 2개 있네)
boxplot(Petal.Width~Species, data=iris, pch=19, col='orange', border='brown')
: 품종에 따라서 Petal.Width를 그려라, data를 가지고~ 

2-2) 우선, setosa의 이상값이 얼마인가를 알아보자
outlier = boxplot.stats(iris[iris$Species == 'setosa', 4])$out
-> 0.5와 0.6이 나오네

2-3) 어느 행에 있는건가!?
iris[iris$Petal.Width == outlier, ]
-> 어? 0.6인 것만 나오네?!

2-4) 2개 맞게 나오네 (%in% 활용)
iris[iris$Petal.Width %in% outlier, ]
-> 이제 0.5랑 0.6 2가지 다 나오네



================================================
< 패키지 설치 >
** 사용전 library('패키지명')
엑셀 파일 읽기 : install.packages('readxl')
결측치 처리 : install.packages('mice')
결측치 확인 : install.packages('moonBook')
교차표만들기 : install.packages('gmodels')
기술통계량 : install.packages('psych')
시간 데이터 형태 : install.packages('lubridate')
완성도 높은 table 출력 : install.packages("stargazer")

================================================

# 팝업창 띄우기 -> 맨위에 있도록 설정
windows(width = 7, height=5)

# 색상 구경
colors()

# ---파일저장----------------------------------------------------------------------

- 중간 결과 값을 csv 파일로 저장
# !!! 중간 결과 값은 csv 파일로 저장하면서 작업하는 습관 들이도록 할 것!!!
df <- iris
df$Sepal.Sum <- df$Sepal.Length + df$Sepal.Width

write.csv(df, 'my.iris.csv')
# write.csv(변수명, '파일명')
# 현재 디렉토리에 생김

getwd()
# 현재 위치 확인해도 되고, 옆 Files탭에서 확인
# 엑셀로 보니 rownames가 붙어있음을 확인
# 미리 제거하기 위해서 파라미터 적기

write.csv(df, 'my.iris.csv', row.names = F)
# 편집하고 있으면 오류나면서 안되니까 닫고 하기

# ---파일읽기----------------------------------------------------------------------
# csv를 불러서 
df1 <- read.csv('my.iris.csv', header = T, stringsAsFactors = F )
# header = T => '첫 행이 컬럼명이다.' 라는 의미
# stringsAsFactors = F => 문자 데이터를 factor 타입으로 변환되지 않게
 : F -> f1      : chr  "c" "d" "e" "p" ...
 : T -> f1      : Factor w/ 5 levels "c","d","e","p",..: 1 2 3 4 5    ... 디폴트값

*** data.frame()으로 데이터프레임을 생성할 때, 변수에 문자가 있을 경우 자동으로 factor타입으로 변환된다.하지만 factor 변수는 연산이 되지 않으므로 stringsAsFactors() 함수를 써서 factor타입으로 변환되지 않게 한다.

str(df1)
# 캐글이든 공공데이터든 엑셀 파일/csv로 받는 경우가 많음

# 엑셀 파일 읽기
library(readxl)
df <- read_excel('성적표1.xlsx', sheet= 1)
# 첫번째 sheet를 읽겠다는 것임

** 읽은 후, 
- 구조 등 확인 : str(df)
- tibble이네? DF와 비슷한 것으로 보면 되지만,
  굳이 바꾸겠다면 : df <- data.frame(df)
- 재확인 : str(df)
- 데이터 형 확인 : class(df)
- 새로운 연산을 통한 컬럼 추가
  : df$평균 <- mean(df$파이썬 + df$러닝머신 + df$R)
# 각각이 모두 벡터인데, 이렇게 하면 다 합쳐서

i) 
df$평균 <- (df$파이썬 + df$러닝머신 + df$R) / 3

ii) 행별 평균 vs. 열별 평균
apply(df[, 3:5], MARGIN = 1, mean)
# 범위 잡아 놓고, MARGIN으로 방향 설정
# 1 행별 평균
# 2 열별 평균

+) 소수점 처리
df$평균 <- round(apply(df[, 3:5], MARGIN = 1, mean), 2)

# ----전처리------------------------------------------------------------------------
st <- data.frame(state.x77)
----------------------------------
1) 선택
(1) subset -> 행별 조건
(2) select -> 열별 조건

# 인구가 가장 많은 주의 문맹률과 고등학교 졸업률) => c(3,6) 추가
st[st$Population == max(st$Population), c(3,6)]
           (행 조건)                  (열조건)
<=>
subset(st, subset = st$Population == max(st$Population), select = c(3,6))
    데이터셋                               (행 조건)                    (열 조건)

*** 적절한 곳에 사용
- 인덱스 사용 :    iris[, -5]
- subset 사용 :    subset(iris, select = -5)
------------------------------------------------------------------------------------------
2) 집계
** aggregate() 함수 : 범주별로 통계량을 확인하고 싶을 때 주로 활용
-> by를 기준으로 FUN을 수행해줘

aggregate(df, by = list(Species=df$Species), FUN=length)

aggregate(df, by = list(df$Species), FUN = mean)
# mean함수를 품종별로 구한 것것
# Species는 범주형이므로 NA로 뜨게 되는 것이고
# 범주형 컬럼은 일단 제외하고 보자

aggregate(df[, -5], by = list(품종=df$Species), FUN = mean)
# '품종'을 해당 공간에 넣을 수도 있음

aggregate(df[, -5], by = list(품종=df$Species), FUN = sd)
# 표준편차

*** 여러 개의 범주를 사용해서 분할할 수도 있음
df <- subset(mtcars, select = c("mpg", "cyl", "gear"))
aggregate(df, by = list(cyl=mtcars$cyl, gear=mtcars$gear), FUN = mean)

*** 행인덱스 이름 지정
aggregate(df[,c(10,12)], by = list(df$Sex), FUN = mean)
# Group.1로 뜨지만 아래와 같이 지정을 하면
aggregate(df[,c(10,12)], by = list(Gender = df$Sex), FUN = mean)

---------------------------------------------------------------------------------------------------
# 샘플링을 한차례 했는데, 희귀한 경우가 나타난 것으로 주장할 수 없음
# -> 같은 표본수로 샘플링을 여러번 해보면, 희귀한 결론과는 다른 결과가 죽- 나왔음
# -> 유의확률 (샘플링을 했지만, 운 나쁘게 희귀한 결론이 나오는 샘플링을 할 확률)


------------------------------------------------------------------------------------------
3) 분리

split() 함수 : 데이터 프레임을 범주형 변수를 기준으로 여러 개로 분할

levels(iris$Species)  # 일단 펙터들 참고

# i)
set <- iris[iris$Species == 'setosa', ]
ver <- iris[iris$Species == 'versicolor', ]
vir <- iris[iris$Species == 'virginica', ]

# ii)
sp <- split(iris, f = iris$Species)
sp$setosa
sp$versicolor
sp$virginica

# => i)과 ii)는 같은 결과

# iii) 확인작업
names(sp)
summary(sp)
length(sp)
class(sp)   # split은 list로 반환하는 구나

dim(sp$setosa)
dim(sp$versicolor)
dim(sp$virginica)

------------------------------------------------------------------------------------------
4) 결합
(1) rbind () 함수 : 행을 기준으로 여러 개의 데이터 프레임을 결합
(2) cbind () 함수 : 열을 기준으로 여러 개의 데이터 프레임을 결합

# if) 다시 합치고 싶다면
# sheet가 다르고, 컬럼이 같은 상태라면,,
# rbind를 쓰면 (아래에 붙여(종으로 합쳐))
# cbind를 쓰면 (오른쪽에 붙여(횡으로 합쳐))
df.2 <- rbind(sp$setosa, sp$versicolor)
df.3 <- cbind(df[, 1:2], df[, 3:4])

(3) merge() 함수 : '특정 변수의 값이 같은 행'을 기준으로 여러 개의 데이터 프레임을 병합
- 컬럼별로 합치긴 하지만, 특정 변수의 값이 같은 행을 기준으로
- all = T 를 거의 활용하지, 따로 all.x = T 나 all.y = T 두가지는 자주 쓰지는 않음

***
library(readxl)
df.1 <- read_excel('./0805/성적표1.xlsx', sheet = 1)
df.2 <- read_excel('./0805/성적표1.xlsx', sheet = 2)

# cbind로 합쳐보면
cbind(df.1, df.2)
# 번호나 이름을 기준으로 해야지, 이대로는 안되겠다
# 그냥 그대로 옆에 붙인 것
# merge()로 해봐

merge(df.1, df.2)
# 번호와 이름. 이렇게 같은 이름을 가진 컬럼들이 있기 때문에
# -> 이것들이 기본키 역할을 해주게 됨
# -> 아이유와 서현진은 각각 한군데씩만 있었기 때문에 출력x

merge(df.1, df.2, all =T)
# 빈 곳은 NA를 채워줌

***
# 만약 내용은 같은데 컬럼명이 다른 경우라면?
# -> 번호 vs. No  // 이름 vs. Name 등등
df.1 <- read_excel('./0805/성적표1.xlsx', sheet = 1)
df.3 <- read_excel('./0805/성적표1.xlsx', sheet = 3)

cbind(df.1, df.3)

merge(df.1, df.3, all =T)
# 안겹쳐도 NA로 출력해서 합쳐줄게!!

merge(df.1, df.3, all =T, by.x = '번호', by.y ='No')
# 이것이 내가 원했던 형태 => DF로 만들어서 분석을 시작해보자

df <- merge(df.1, df.3, all =T, by.x = c('번호','이름'), by.y = c('No','Name'))
# 동일하게 취급할 컬럼명을 벡터로 묶어줌

# 컬럼명 한번에 바꾸기
# -> 혹시나 컬럼명에 빈칸이 있다면!! 아래와 같이 바꿔놓고 작업 시작!!
colnames(df) <- c('No',
                  'Name',
                  'Python',
                  'R',
                  'ML',
                  'DL',
                  'Cloud')

# 컬럼명 하나만 바꾸기
# -> 혹은 빈칸 등 문제가 있는 컬럼의 이름만 바꾸고 시작
colnames(df)[6] <- '딥러닝'

------------------------------------------------------------------------------------------
5) 정렬
** sort() 와 order() 함수 : 벡터의 값을 오름차순 내림차순으로 정렬하거나 정렬 위치를 반환
(1) sort()   -> 벡터 정렬에 쓰임
(2) order() -> 정렬한 데이터들의 '인덱스 번호'를 얘기해주는 것 (like which 함수)
  : 정렬 후의 위치를 알려주므로 , 데이터 프레임을 '변수의 순서'대로 정렬할 때 유용
  : 여러 개의 '변수'로 정렬할 때에도 유용하게 사용할 수 있음

# 정렬 기준의 순서 정해주는 것
# 순서대로 적어주면 됨 (단, 내림차순으로 하고 싶으면 앞에 마이너스(-)기호를 붙이면 됨)

v <- c(30,50, 20, 40, 10)
sort(v)                        # 오름차순
sort(v, decreasing = T)   # 내림차순

*** 
sort(df$Illiteracy, decreasing = T)
# 문맹률이 높은 순으로, 어느 주인지 알고 싶다면!

sort(df, decreasing = T)
# 벡터만 함! DF는 나 못해요 에러 발생

***
ord <- order(df$Illiteracy, decreasing = T)
df[ord[1:10],c(3,2)]
# 상위 10개만 보고 싶다
# => 그렇다면, 문맹률과 소득이 관련이 있을까!?
# 1차적으로 문맹률을 기준으로 내림차순 한 상태
# -> 문맹률의 값이 같다면 -> income의 내림차순으로 정리하고자 한다면!

n <- length(ord)
df[ord[(n-10):n],c(3,2)]
# 하위 10개만 보고 싶다

ord <- order(df$Illiteracy, df$Income, decreasing = T)
df[ord[1:10],c(3,2)]
# 정렬 기준 2가지 적용된 것

*** 오류1 -> Atomic vectors : DF로 안바꿔서 발생
*** 오류2 ->'decreasing'은 반드시 길이가 1인 논리형 벡터이어야 합니다.
의도적으로 'partial'로 설정하고자 하나요? : sort말고 order로 전환해서 해봐

# -----추출-------------------------------------------------------------------------------
# 비복원 추출 vs. 복원 추출출
i) 비복원 추출 : sample(1:10, size = 5)
# 한 행(한번 뽑을 때)에 같은 숫자가 나올 수 없음

ii) 복원 추출 : sample(1:10, size = 5, replace = T)
# 한 행(한번 뽑을 때)에 같은 숫자가 나올 수도 있다는 것이지

*** iris를 랜덤하게 50개 뽑고 싶다!!
idx <- sample(1:nrow(iris), size = 50)
iris[idx, ]

# pure하게 
sample(1:nrow(iris), size = 50, replace = T)

# pseudo하게
set.seed(10); sample(1:nrow(iris), size = 50, replace = T)

# ================================================


install.packages("cowsay")
library(cowsay)
say('Hello, World!')
say('Hello, Chicken',  by = 'chicken')
==================================================
* for문 형태
s <- 0
for (i in 1:10) {
    s <- s+i
}



# === DF  ====================================
* 컬럼
v <- c(85, 77, 96)

# 컬럼의 이름 적어줘
names(v)
names(v) <- c('Kor', 'Eng', 'Math')
names(v)
v
=> 이후, 수정한 컬럼명으로 추출 가능

* 데이터 프레임 만들기
v1 <- 1:7
v2 <- c('홍길동', '전우치', '주니온', '서현진', '김동욱', '연오랑', '세오녀')
v3 <- factor(c('M', 'M', 'M, 'F', 'M', 'M', 'F'))
df <- data.frame (no=v1, name=v2, sex=v3)

* 행렬처럼 2차원으로 인덱싱 가능!!
iris[1:5, ]
iris[1:5, 1:4] <=> iris[1:5,-5]

* 열벡터 가져오기 (아래 3개는 결과 같음)
iris$Sepal.Length
iris[, 1]
iris[, 'Sepal.Length']

* 데이터 프레임에서도 조건식을 이용하여 필터링할 수 있음
* 데이터 프레임에 새로운 변수 열 벡터 를 추가할 수도 있음
* 행렬은 데이터 프레임으로 자료형 변환이 가능함

* rownames(df명)
행index와 행번호를 출력해줌 -> 찾을 때 활용

==================================================
if 조건문 할 때, 
- 괄호( ( ) ) 안에 조건
- 중괄호( {} ) 안에 참일 경우 실행문
** else (if) 는 반드시 } 가 있는 줄에 함께 있어야 함
==================================================
getwd() : 현재 경로
data() : 데이터에 뭐가 있는지 볼 수 있음
View(iris): View(테이블처럼 보여줌)
iris : 그대로 데이터셋 쳐도 출력됨
plot(iris) : 
?plot : Help탭에서 정보 출력

str(iris) : 데이터 구조, 변수 개수, 변수 명, 관찰치 개수, 관찰치의 미리보기
head(iris) : 처음부터  6개의 행 정보 출력 (디폴트 값으로 n=6이 되어 있는 것)
tail(iris) : 끝에서부터 6개의 행 정보 출력 (디폴트 값으로 n=6이 되어 있는 것)
dim(iris) : 데이터 객체의 차원
length() : 데이터 객체의 요소들의 개수

names() : 데이터 객체 구성요소 이름(컬럼명들)

ls(iris) : 현재 변수(벡터)들 // 저장되어 있는 변수들을 모두 출력
  -> cf) rm(list = ls()) 의 방법으로 현재 저장되어 있는 모든 변수를 삭제

object 객체 : 
class(iris$Species) : 데이터 객체 구성요소의 속성 (자료의 형태)
mode(iris$Species) : 객체의 내부적 타입을 출력 
length() : 데이터 객체의 요소들의 개수
levels(iris$Species) : 펙터들을 보여줌
 -> level은 범주형 변수가 가지는 범주값
 -> factor는 레벨로 지정된 범주값만 가질 수 있는 벡터
nlevels(iris$Species) : 펙터의 개수를 보여줌
table(iris$Species) : 데이터의 빈도

===================

MASS 패키지에 있는 Cars93 데이터 프레임 내 1~5번째 변수만 선택해서, base 패키지에 있는 names() 함수로 변수명을 변경

rename() : 데이터 프레임 변수명 변경

> library(MASS)
> # Cars93 데이터 프레임 내 변수명 확인
> names(Cars93)

Cars93 데이터 프레임의 1~5번째 변수만 선택한 후 names()로 변수명 변경
> Cars93_subset <- Cars93[,c(1:5)]
> names(Cars93_subset)

# === 수리적 ====================================
abs(x) : 절대값
sqrt(x) : 제곱근
round(x, digits = n) : 반올림수
log(x), log10(x) : 자연로그, 밑이 10인 로그

sum(x), mean(x), var(x), sd(x), median(x), min(x), max(x)
합계, 평균, 분산, 표준편차, 중앙값, 최솟값, 최댓값

quantile(x, y) : R에서 분위수를 구하는 함수
 -> x는 자료, y는 0~1 사이의 값 이 들어갑니다.

quantile(data, 0.5)는 중앙값을 구해주고
quantile(data, 0.25)는 제1 사분위수를 구해줍니다.
마찬가지로 quantile(data, 0.99)는 100등분을 하는 99번째 값
-------------------------------------------------------------------------------
summary() :  최소, 최대, 평균, 상위 25%(1st Qu.), 상위 50%(Median), 상위 75%(3rd Qu.) 평균을 보여줌

# === 기본문법 ====================================

- 원시 자료형 : 논리형, 숫자형, 문자형, 특수형
- 연산자(operators) 
 -> 산술 연산자 (사칙연산, ^or**, %%(나머지), %/%(몫))
 -> 논리 연산자(<, >, <=, >=, ==, !=,
                     [ !, &, | (not, and, or) ] : 벡터 전체를 리턴
                     [ &&, || (and, or) ]      : 단일값(벡터의 첫번째 결과만)을 리턴
-> ! (논리값에서) not
-> cf) -(인덱싱에서) 제외

- break : 현재 수행 중인 반복문을 중단하고 코드 블록을 빠져나감
- next : 현재 수행 중인 반복문의 코드 블록에서 다음 반복으로 되돌아감 

# NA : 값이 NA라는 것
# NULL : 값이 비어져 있다는 것

- R의 데이터 object
### -------------------------------------------------------------------------------
-> 벡터: vector()
-> 벡터의 원소 : 논리형, 숫자형, 문자형
-> 벡터의 원소는 반드시 동일한 기본 자료형을 가짐
-> data 유형이 다를 시, 자동 변환 : 논리 < 숫자 < 문자 (클수록 기준 선정)

=>  vector(length=5)
=> 1:5, c(1,2,3,4,5), seq(from=1, to=5, by=1), rep(1:5, each=1, times=1)
=> 결과 : 1 2 3 4 5

=> c() : 빈 벡터 생성
### -------------------------------------------------------------------------------
-> 팩터: factor()
> f.blood factor blood ,
+ levels c 1 , 2 , 3 , 4 ),
+ labels c A '', B '', AB '', O

> f.blood
[1] A B AB A O AB B O
Levels: A B AB O

> levels(f.blood)
[1] "A" "B" "AB" "O"
> table(f.blood)

f.blood
A B AB O
2 2 2 2
### -------------------------------------------------------------------------------
-> 리스트: list()
* 벡터의 벡터 : 서로 다른 유형의 원소를 가질 수 있는 벡터
* 리스트의 인덱싱 :
- $ 기호 를 이용해서 원소의 이름 으로 인덱스 지정
 -> sum(lst$no), lst$sex, table(lst$sex)
 -> lst$name[1:3]
- 두 개의 대괄호 [[]] 내에 인덱스 지정

v.1 <- c(1,2,3)
v.2 <- c('F','F','M')

lst <- list(id = v.1, gender = v.2)
lst <- list(id = v.1, gender = factor(v.2))

# '$'는 각 리스트를 의미하는 것임
# 벡터만 타입이 같으면 되지, 리스트 상호간의 타입은 달라도 되니까

### -------------------------------------------------------------------------------
-> 행렬: matrix()
• 행 ( 과 열 ( 의 2 차원을 가진 벡터
- 2 차원 벡터이기 때문에 모든 원소는 동일한 원시 자료형을 가져야 함
• 행렬의 인덱싱
- 대괄호 [] 안에 콤마로 구분하여 행과 열의 위치 지정 : [ row , col ]

* t(m), dim(m), nrow(m), ncol(m)
* rbind (), cbind () 함수로 행렬을 합칠 수 있음
  -> 가로로 촥촥촥, 세로로 촥촥촥

### -------------------------------------------------------------------------------
-> 데이터 프레임: data.frame()

# === 참고 ========================================

- 테이블의 각 col의 name중 하나인 Species를 그냥 변수처럼 이용하고 싶다면
- data("iris")를 시행하고 attatch("iris")를 이용하여 전역변수공간에 iris를 붙여주면 이제 우리는 Species라는 것을 자유롭게 이용 할 수 있다. 이때 제거하기 위해서는 detach를 이용
- https://www.crocus.co.kr/1201

- .Rdata 파일에 다 저장되어 있음
- MyProject.R~ 프로젝트 파일 다시 열기 > environment 탭에서 비어있음을 확인

