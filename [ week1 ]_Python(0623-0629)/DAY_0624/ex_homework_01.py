#---------------------------------------------------------------------------------------------------------------
# PROGRAM : AddressBook_APP
# DESCRIPTION : File I/O 처리, str 데이터 처리, Function
# (1) AddressBook 폴더에 개인 생성 -> 이름_전화번호.txt
# (2) 보기, 검색, 추가, 종료 기능 => 메뉴 출력
# (3) 종료 입력 전까지 무한 반복
#---------------------------------------------------------------------------------------------------------------
# 전역변수 및 상수 선언
# 변경하면 안되는 대문자로 상수 선언 (파이썬의 경우, 튜플로)

DIR_PATH='./AddressBook/'                            # 파일 저장 폴더
ADDR_LIST=['가_111', '가나다_111']                    # 주소 파일 저장 리스트

# 코드에 주석을 넣을 수 있도록
# 함수로 쪼개서 넣을 수 있도록
# 기능 - 함수 - 함수 동작 test - 하나로 만듦

# 함수 정의 --------------------------------------------------
# (파이썬의 경우, 굳이 구분하지 않지만, 다른 언어는 함 정의(완전체), 선언(한줄로 간결히-매개변수, 반환 등 기록)))
# 함수 정의 하고, 오류 없이 돌아가는지 확인하고 다시 진행 식으로

# 메뉴 출력 함수 --------------------------------------------
# 함수명 : printMenu
# - 이름을 보고 어떤 기능인지 알 수 있는 것이 좋음
# 파라미터 : 없음
# 리턴값 : 없음

def printMenu():
    print('=' * 7 + 'ADDRESSBOOK' + '=' * 7)
    print(' ' * 7 + '1. 전체보기')
    print(' ' * 7 + '2. 검   색')
    print(' ' * 7 + '3. 추   가')
    print(' ' * 7 + '4. 종   료')
    print('=' * 25)

# 전체 전화번호 리스트 출력 함수 --------------------------------------------------------------------------------------------
# 함수명 : showAddress
# 파라미터 : 없음 (다보여줌)
# 리턴값 : 없음
# -----------------------------------------------------------------------------------------------
def showAddress():
    for addr in ADDR_LIST:
        print(addr)
# '.txt'를 떼어주든 붙이든 작업을 한번은 해줘야 하는 것. 선택하기

# 등록된 주소 검색 후 정보 출력 함수 ----------------------
# 함수명 : searchAddress
# 파라미터 : name or phone_number str data
# 리턴값 : 없음
# -------------------------------------
def searchAddress(name_phone):
    # 파일명 리스트 안에서 해당 검색어 존재 여부 체크
    for add in ADDR_LIST:
        if name_phone in add:
            print(f'파일명 : {add}')
            with open(DIR_PATH+add+'.txt', mode = 'r', encoding='utf-8') as f:
                print(f'정  보 : {f.read()}')

# 파일 생성 및 추가 함수
# 주소록  ---------------------------------------------------------------------------
# 함수명 : addAddress
# 파라미터 : 이름, 전화번호, 지역 (input으로 받을 경우)
# - 입력받는 기능을 해당 함수에 넣으면 필요 없는 것
# 반환값 : 없음
#----------------------------------------------------------------------------------------------------------
def addAddress(name, phone, loc, email):
    # filename = DIR_PATH
    filename = name+'_'+phone+'.txt'
    # 파일명 리스트 추가
    ADDR_LIST.append(filename[:-4])
    # AddressBook 폴더에 파일 생성
    with open(DIR_PATH+filename, mode = 'w', encoding= 'utf-8') as f:
        f.write(name + ' ' + phone + ' ' + loc + ' ' + email)

# 프로그램 초기화 함수--------------
# ADDR_LIST에 AddressBook안에 존재하는 파일 리스트 정보가 추가
# 함수명 : initApp
# 파라미터 : 없음
# 반환값 : 없음
#----------------------------------------------------------------------------------------------------------
def initApp():
    pass
    # with open(DIR_PATH, mode = 'r', encoding='etf-8') as f:
    #     print(f.write())
    # => 모듈을 써서 해결

#----------------------------------------------------------------------------------------------------------
# 기능 구현
print('----- 프로그램 시작합니다.!!')
while True:
    printMenu()

    # 사용자로부터 메뉴 선턱
    select = input("메뉴 선택 : ")
    if select == '4': break

    elif select == '1':
        showAddress()
    elif select == '2':
        search = input("이름 또는 전화번호 검색 : ")
        addAddress(search)
    elif select == '3':
        search = input("이름, 전화번호, 지역, 이메일 : ex) 홍길동, 123-4567-8901, 대구, asdf@naver.com ").split(',')
        addAddress(search[0], search[1], search[2], search[3])

        # name, phone, loc, email = input("이름, 전화번호, 지역, 이메일: ").split(',')
        # 언패킹
        # print(name, phone, loc, email)

    else:
        print('해당 메뉴는 존재하지 않습니다.')

print('----- 프로그램 종료합니다.!!')

# searchAddress('111')
# addAddress('마징가', '010-111', '대구', 'asdf3@naver.com')

#---------------------------------------------------------------------------------------------------------------
# 프로그램 시작 전 초기화 작업 해주어야
# -