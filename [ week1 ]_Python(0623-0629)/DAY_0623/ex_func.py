#-------------------------------------------------------------------------------------
# 함수 (Function) : 자주 사용되는 기능을 묶어서 이름을 붙여 놓은 것
# - for 코드 재사용 (자주 사용하는 것들을 만들어야 효용성이 있지)
# 형태 (함수명은 보자마자 어떤 기능을 하는지 파악할 수 있도록 정해줄 것)
# def 함수명( 재료, ... , 재료n):
#    코드
#    코드
#    return 결과
#-------------------------------------------------------------------------------------
# 기능 : 숫자 2개 더하는 기능, 더한 수 결과를 돌려주는 기능
# 함수명 : addTwo
# 재료(즉, 매개변수(parameter)) : num1, num2
# 결과(반환값) : 더한 값
#-------------------------------------------------------------------------------------

def addTwo(num1, num2):
    '''
    숫자 2개 더한 후 결과 반환
    :param num1: int
    :param num2: int
    :return: int
    '''
    value = num1+num2
    return value

# 함수 사용하기 => 함수 호출
result = addTwo(23,40)

# 화면에 출력하기 => print(데이터)
print(result)

#-------------------------------------------------------------------------------------

# 기능 : 문자2개를 더하는 기능의 함수
# 함수명 : addStr
# 재료 : str1, str2
# 반환 : 더한 값

#-------------------------------------------------------------------------------------

def addStr(str1, str2):
    return str1+str2

print(addStr('가나다','ABC'))

# 변수는 많이 쓰면 메모리만 잡아먹을 뿐, 한번 쓰는 경우 굳이 변수를 주어 저장할 필요는 없다는 것
# 만약, 반환값이 없다면,
# i) 반환값을 갖고 연산을 하고자 할 때 할 수가 없는것. => 상황에 맞게 반환여부 결정
#   ex) 개발전 설계를 할 때, 해당 여부를 결정하기도 함 
#   ex) 반환값이 없이 출력만 하는 경우
# ii) 필요에 따라 출력된 값을 변수에 담에서 쓰는 경우도 (maybe 일회적인) 있겠지

#-------------------------------------------------------------------------------------

# 기능 : 원하는 단의 구구단을 출력하는 기능의 함수
# 함수명 : guguDan
# 재료 : dan
# 반환 : 없음
# => 입력한 dan(단)의 구구단 출력

#-------------------------------------------------------------------------------------

def guguDan(dan):
    print(f' **** {dan}단 보기 **** ')
    for i in range(1, 10):
        print(f' {dan} x {i} = {dan * i}')
    print("*"*17)

guguDan(3)

# 출력말고, 반환을 하는 경우 -> 리스트로 만들어 줄지, 문자열로 만들어 줄지 정해서

#-----------------------------------------------------------------------------------
# 가변인자 함수 => 매개변수 0개 ~ n개

def addNum(*nums):
    print(f' nums type: {type(nums)}')
    total = 0
    for num in nums: total += num
    return total

addNum(1,2,3,4,5)
addNum(1,1,1,1,1,1)
addNum()

#-------------------------------------------------------------------------------------
# 매개변수의 개수가 유동적인 경우 => 가변인자, 키보드 파라미터

# i) 가변인자

# 기능 : 평균 구하는 함수
# 함수명 : getAvg
# 매개변수 : 과목명과 점수는 유동적 => **subjects
# 리턴값 : 평균 ---- float
def getAvg(**subjects):
    print((f'subjects type : {type(subjects)}'))

getAvg(())


# ii) 키보드 파라미터
def getAvg(**subjects):
    print((f'subjects type : {type(subjects)}'))
    values = subjects.values()
# 반복은 가능함 (해당 dict 타입은 인덱스는 사용 불가)
    total = 0
    for value in values: total += value
    print((f'total => {total}'))
    return total / len(values) if len(values) > 0 else -1
# 과목명과 점수들 중 키:값으로 받은다음, 평균을 구하고자 한다면, vlaue만 따로 떼어서 len(키)해서 나누어 주면 되는 것이지
# 한줄에 if 넣는 것 익숙해 지도록

print(getAvg(국어=12, 영어=34, 수학=90))
print(getAvg())
# 키워드 파라미트의 key는 따옴표 없는 문자열만 됨, 숫자x, 따옴표 있는 문자열x


#-------------------------------------------------------------------------------------
# 매개변수 초기값(default value)
#-------------------------------------------------------------------------------------
# 함수(fuction)의 데이터 타입 => class fuction
print(type(addNum()), id(addNum()))
list = [addNum(), getAvg()]

def plus(a,b):
    return a*b

def minus(a,b):
    return a-b

first=[plus, minus]
print(first[0](1,2))
print(first[1](1,2))

# 함수명을 리스트나 변수에 담아서 쓰는 경우도 있음 = > class function

#-------------------------------------------------------------------------------------
