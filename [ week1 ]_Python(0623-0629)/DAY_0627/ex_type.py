# ---------------------------------------------------------------------------------------------------------------------
# 파이썬에서 미리 만들어서 제공하는 클래스
# Built-in class
# - int, float, str, bool, list, tuple, dict, set
# ---------------------------------------------------------------------------------------------------------------------
num = 12
# => heap에 생성 => 생성된 것을 객체(object)라고 부름 => 참조하고 있음
# => 해당 클래스에 속한 것이라면, '아~ 이 type의 data구나'라고 인지`
# => class라고 선언만 것임
# 선언을 해서 만들어져서 heap에 저장되는 것을 객체(object)임
# 변수와 함수가 같이 들어있는 data type이라고 생각할 것

# 대표적인 것 말할 때 (a) -> 객체
# 상세히 말할 때 (the) -> 인스턴스
# 객체 > 인스턴스

# 클래스에 포함된 변수나 함수들을 활용해 만든 결과물(instance)는 달라질 수 있음
# 68 -> class는 정해져 있음 -> 만들어지는 별은 다름
# --> 운동화 만드는 공정 -> 커스텀마이즈 -> 같은 모델이라도 색깔, 사이즈 등 달라질 수 있음
# ==> 일종의 설계도

# ---------------------------------------------------------------------------------------------------------------------
# 내 프로그램(프로젝트)에서 데이터를 표현하는 클래스
# 사용자 정의 클래스
# ---------------------------------------------------------------------------------------------------------------------
# 생성 방법
# class 클래스명:
#       변수   -> 클래스가 나타내는 속성, 특징, 성질 등
#       메서드  -> 클래스의 기능, 역할
# => 클래스를 생성한 것이지, 메모리에 데이터를 저장한 것은 아님 (like 함수 선언(o), 함수 실행/호출(x)
# ---------------------------------------------------------------------------------------------------------------------

# ex) 사람을 저장하는 데이터 타입 -> 성별,이름,나이,키 등(고유속성) / 먹다, 자다 (행태 등)
# => 이 중에서 뽑아내기 => 변수(데이터)  vs.  함수(메서드)  ->  구분하기
# => 이렇게 구분한 변수와 함수를 묶어 하나의 타입으로  =>  클래스(class)
# (당연히, 변수만/함수만/변수와 함수 모두o/변수와 함수 모두x  =>  이런 유형으로 나올 수도 있는 것

# ---------------------------------------------------------------------------------------------------------------------

# 계산기 프로그램을 만들고자 함
# => 계산기 데이터 type을 생성
# => 계산기에 대한 data를 생각해봐
# - 사칙연산(+,-,*,/) -> 기능 -> 함수
# - 데이터                   -> 변수
# => 계산기 타입

# 어떤 데이터가 저장되는지 알 수 있도록 명명
# -> 클래스명      - calc
# -> 변수         - num1, num2
# -> 함수(메서드)  - plus(), minus(), mult(), div()
# ---------------------------------------------------------------------------------------------------------------------

class calc:
    # num1 = 0
    # num2 = 0

    # 객체 생성자(Constructor)
    # 클래스명()  ->  객체 생성 시 호출되는 메서드  ->  '자, ~라는 객체를 열거야'ㄴ
    # 파이썬에서 클래스 생성 시에 자주 사용되는 기능의 메서드를 미리 만들어서 제공하는 것
    # 형태 : def __메서드명__(self)
    # __init__ : 객체 생성 시 변수 생성 및 초기화 하는 겨웅 사용
    def __init__(self, num1, num2):
        print('__inint__')
        self.num1=num1
        self.num2=num2
        # => 변수 num1= 0, num2=0 해놨던 것 필요없음

    # default value 줄 수 있음 (self, num1=0, num2=0) 처럼

    # def __init__(self):                # 부를 떄, 초기화하고 싶을 때 사용 (like 인쇄할 때 지속적으로 생기는 것)
    #     print('__init__')

    # def __  => pre~ , calc~

    # 클래스의 기능 => 메서드
    def plus(self, num1, num2):
        print(self.num1 + self.num2)   # => (like 지역변수)
        print(num1+num2)               # => (like 전역변수, 인수)

    def minus(self, num1, num2):
        print(num1-num2)

    def mult(self, num1, num2):
        print(num1*num2)

    def div(self, num1, num2):
        print(num1/num2)

# 클래스 사용하기 ===> 메모리에 데이터를 저장 ===> heap에 객체 생성
#              ===> 클래스명() -> 객체 생성

myCalc = calc(12,5)
print(f'myCalc => {type(myCalc)}')

# 클래스 안에 존재하는 변수, 함수의 접근
# -> 객체변수명.변수, 객체변수명.함수명()

myCalc.num1 = 12
myCalc.num2 = 5
myCalc.plus(4,2)

# yourCalc = calc()       # 요대로 하면 오류
yourCalc = calc(10.3,5)
yourCalc.div(12,3)
# yourCalc.num1 = 10.3
# yourCalc.num2 = 5
yourCalc.plus(12,3)

otherCalc = calc(12,3)
# otherCalc.plus(12,3)

# => 변수는 바뀔 수 있지만, 함수들은 바뀌지 않는데도, 같은 것들이 3개나 생겨버림
# 함수들을 따로 뺴서 하나로 만들고, 필요시 갖다쓰기 (for 사용 메모리 감소)
# 3개 계산기 중 어느것이 함수를 쓰는지 모름
# self는 자동으로 들어가지
# => slef !! 파이썬 시스템에서 myCalc / yourCalc / otherCalc 쓸 때, 함수를 호출할 때, 자동으로 해당하는 주소를 담아서 함수에 넣어줌

# self 키워드 !!

# ---------------------------------------------------------------------------------------------------------------------
class calc:

    def __init__(self, num1=0, num2=0):
        print('__inint__')
        self.num1 = num1
        self.num2 = num2

    # 클래스의 기능 => 메서드
    def plus(self, num1, num2):
        print(self.num1 + self.num2)
        print(num1 + num2)

    def minus(self, num1, num2):
        print(num1 - num2)


mycalc = calc(2, 5)
mycalc.plus(10, 2)

ycalc = calc()
ycalc.minus(10, 2)
# ---------------------------------------------------------------------------------------------------------------------
